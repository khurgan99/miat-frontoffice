{"version":3,"file":"static/js/534.28b57864.chunk.js","mappings":"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","sources":["pages/Destinations.js"],"sourcesContent":["import { useEffect, useLayoutEffect, useState } from 'react';\r\nimport * as am5 from \"@amcharts/amcharts5\";\r\nimport * as am5map from \"@amcharts/amcharts5/map\";\r\nimport am5geodataWorldLow from \"@amcharts/amcharts5-geodata/worldLow\";\r\nimport am5themes_Animated from \"@amcharts/amcharts5/themes/Animated\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/outline';\r\n\r\nfunction classNames(...classes) {\r\n    return classes.filter(Boolean).join(' ')\r\n}\r\n\r\nconst Destinations = () => {\r\n\r\n    const [choosedCountry, setChoosedCountry] = useState({});\r\n    const [shownavigate, setShowNavigate] = useState(true);\r\n\r\n    const { t } = useTranslation();\r\n\r\n    const clickShowNavigate = () => {\r\n        setShowNavigate(!shownavigate)\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    }, [])\r\n\r\n    useLayoutEffect(() => {\r\n        let root = am5.Root.new(\"chartdiv\");\r\n\r\n        // Set themes\r\n        root.setThemes([\r\n            am5themes_Animated.new(root)\r\n        ]);\r\n\r\n        var chart = root.container.children.push(\r\n            am5map.MapChart.new(root, {\r\n                panX: \"rotateX\",\r\n                panY: \"rotateY\",\r\n                // projection: am5map.geoMercator(),\r\n                // projection: am5map.geoNaturalEarth1(),\r\n                projection: am5map.geoOrthographic(),\r\n                // homeGeoPoint: { latitude: 46.8625, longitude: 103.8467 },\r\n                wheelY: \"none\",\r\n                // rotationX: -130.8467,\r\n                // scale: 1.5\r\n            })\r\n        );\r\n\r\n        let zoomControl = chart.set(\"zoomControl\", am5map.ZoomControl.new(root, {}));\r\n        zoomControl.homeButton.set(\"visible\", true);\r\n        chart.chartContainer.get(\"background\").events.on(\"click\", function () {\r\n            chart.goHome();\r\n        })\r\n\r\n        // Create polygon series\r\n        var polygonSeries = chart.series.push(\r\n            am5map.MapPolygonSeries.new(root, {\r\n                geoJSON: am5geodataWorldLow,\r\n                exclude: [\"AQ\"]\r\n            })\r\n        );\r\n\r\n        // polygonSeries.mapPolygons.template.setAll({\r\n        //     tooltipText: \"{name}\",\r\n        //     interactive: true\r\n        // });\r\n\r\n        // polygonSeries.mapPolygons.template.states.create(\"hover\", {\r\n        //     fill: am5.color('#9fbfde')\r\n        // });\r\n\r\n        polygonSeries.mapPolygons.template.events.on(\"click\", (ev) => {\r\n            var dataItem = ev.target.dataItem;\r\n            var data = dataItem.dataContext;\r\n            console.log(data);\r\n        });\r\n\r\n        var backgroundSeries = chart.series.unshift(\r\n            am5map.MapPolygonSeries.new(root, {})\r\n        );\r\n\r\n        backgroundSeries.mapPolygons.template.setAll({\r\n            fill: am5.color(\"#00000080\"),\r\n            strokeOpacity: 0\r\n        });\r\n\r\n        backgroundSeries.data.push({\r\n            geometry: am5map.getGeoRectangle(90, 180, -90, -180)\r\n        });\r\n\r\n        chart.animate({ key: \"rotationX\", to: -80.8467, duration: 1500, easing: am5.ease.inOut(am5.ease.cubic) });\r\n        chart.animate({ key: \"rotationY\", to: -20.8625, duration: 1500, easing: am5.ease.inOut(am5.ease.cubic) });\r\n\r\n        // this will be invisible line (note strokeOpacity = 0) along which invisible points will animate\r\n        let lineSeries = chart.series.push(am5map.MapLineSeries.new(root, {}));\r\n        lineSeries.mapLines.template.setAll({\r\n            strokeOpacity: 1,\r\n            stroke: am5.color(\"#2259ff\"),\r\n            strokeWidth: 1,\r\n            // strokeDasharray: 1\r\n        });\r\n\r\n        // this will be visible line. Lines will connectg animating points so they will look like animated\r\n        // let animatedLineSeries = chart.series.push(am5map.MapLineSeries.new(root, {}));\r\n        // animatedLineSeries.mapLines.template.setAll({\r\n        //     // stroke: am5.color(0xffba00),\r\n        //     // strokeOpacity: 0.6,\r\n        //     strokeWidth: 1,\r\n        // });\r\n\r\n        // invisible series which will animate along invisible lines\r\n        let animatedBulletSeries = chart.series.push(\r\n            am5map.MapPointSeries.new(root, {})\r\n        );\r\n\r\n        animatedBulletSeries.bullets.push(function () {\r\n            let circle = am5.Circle.new(root, {\r\n                radius: 0\r\n            });\r\n\r\n            return am5.Bullet.new(root, {\r\n                sprite: circle\r\n            });\r\n        });\r\n\r\n\r\n        let cities = [\r\n            {\r\n                id: \"ulaanbaatar\",\r\n                title: t('ulaanbaatar'),\r\n                country: 'mongolia',\r\n                geometry: { type: \"Point\", coordinates: [103.8467, 46.8625] },\r\n            },\r\n            {\r\n                id: \"frankfurt\",\r\n                title: t('frankfurt'),\r\n                country: 'germany',\r\n                distance: '7,010 km',\r\n                duration: \"8 hours, 45 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [8.6821, 50.1109] }\r\n            },\r\n            {\r\n                id: \"hongkong\",\r\n                title: t('hongkong'),\r\n                country: 'china',\r\n                distance: '3,350 km',\r\n                duration: \"4 hours, 10 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [114.2, 22.3] }\r\n            },\r\n            {\r\n                id: \"tokyo\",\r\n                title: t('tokyo'),\r\n                country: 'japan',\r\n                distance: '3,869 km',\r\n                duration: \"4 hours, 22 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [139.6917, 35.6895] }\r\n            },\r\n            {\r\n                id: \"seoul\",\r\n                title: t('seoul'),\r\n                country: 'south_korea',\r\n                distance: '2,304 km',\r\n                duration: \"2 hours, 45 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [126.9779, 37.5665] }\r\n            },\r\n            {\r\n                id: \"ho_chi_minh\",\r\n                title: t('ho_chi_minh'),\r\n                country: 'vietnam',\r\n                distance: '4,563 km',\r\n                duration: \"5 hours, 30 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [106.6297, 10.8231] }\r\n            },\r\n            {\r\n                id: \"istanbul\",\r\n                title: t('istanbul'),\r\n                country: 'turkey',\r\n                distance: '6,702 km',\r\n                duration: \"8 hours, 32 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [28.9784, 41.0082] }\r\n            },\r\n            {\r\n                id: \"busan\",\r\n                title: t('busan'),\r\n                country: 'south_korea',\r\n                distance: '2,593 km',\r\n                duration: \"3 hours, 1 minute\",\r\n                geometry: { type: \"Point\", coordinates: [129.0756, 35.1796] }\r\n            },\r\n            {\r\n                id: \"bangkok\",\r\n                title: t('bangkok'),\r\n                country: 'thailand',\r\n                distance: '4,117 km',\r\n                duration: \"5 hours, 0 minute\",\r\n                geometry: { type: \"Point\", coordinates: [100.5018, 13.7563] }\r\n            },\r\n            {\r\n                id: \"beijing\",\r\n                title: t('beijing'),\r\n                country: 'china',\r\n                distance: '1,383 km',\r\n                duration: \"1 hour, 50 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [116.4074, 39.9042] }\r\n            },\r\n            {\r\n                id: \"osaka\",\r\n                title: t('osaka'),\r\n                country: 'japan',\r\n                distance: '3,221 km',\r\n                duration: \"3 hours, 50 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [135.5022, 34.6937] }\r\n            },\r\n            {\r\n                id: \"phuket\",\r\n                title: t('phuket'),\r\n                country: 'thailand',\r\n                distance: '4,847 km',\r\n                duration: \"6 hours, 2 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [98.3381, 7.8804] }\r\n            },\r\n            {\r\n                id: \"guangzhou\",\r\n                title: t('guangzhou'),\r\n                country: 'china',\r\n                distance: '2,965 km',\r\n                duration: \"3 hours, 45 minutes\",\r\n                geometry: { type: \"Point\", coordinates: [113.2644, 23.1291] }\r\n            }\r\n        ];\r\n\r\n        // destination series\r\n        let citySeries = chart.series.push(\r\n            am5map.MapPointSeries.new(root, {})\r\n        );\r\n\r\n        let planeSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\r\n        let pointSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\r\n\r\n        let point1 = addCity({ latitude: 46.8625, longitude: 103.8467 }, \"Ulaanbaatar\");\r\n        let point2 = null;\r\n        if (choosedCountry.id) {\r\n            point2 = addCity({\r\n                latitude: choosedCountry.geometry.coordinates[1],\r\n                longitude: choosedCountry.geometry.coordinates[0]\r\n            }, \"Frankfurt\");\r\n        } else {\r\n            point2 = addCity({ latitude: 50.1109, longitude: 8.6821 }, \"Frankfurt\");\r\n        }\r\n\r\n        let lineDataItem = lineSeries.pushDataItem({\r\n            pointsToConnect: [point1, point2]\r\n        });\r\n\r\n\r\n        let plane = am5.Graphics.new(root, {\r\n            svgPath:\r\n                \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\",\r\n            scale: 0.07,\r\n            centerY: am5.p50,\r\n            centerX: am5.p50,\r\n            fill: am5.color('#fcffff')\r\n        });\r\n\r\n        planeSeries.bullets.push(function () {\r\n            let container = am5.Container.new(root, {});\r\n            container.children.push(plane);\r\n            return am5.Bullet.new(root, { sprite: container });\r\n        });\r\n\r\n        let circleTemplate = am5.Template.new({});\r\n        // visible city circles\r\n        citySeries.bullets.push(function (root, series, dataItem) {\r\n            let container = am5.Container.new(root, {});\r\n\r\n            let circle = container.children.push(\r\n                am5.Circle.new(root, {\r\n                    radius: 6,\r\n                    tooltipText: \"{title}\",\r\n                    tooltipY: 0,\r\n                    fill: am5.color(\"#2652fb\"), // 6 тэмдэгттэй HEX\r\n                    stroke: am5.color(\"#2652fb\"), // 6 тэмдэгттэй HEX\r\n                    strokeOpacity: 0.3,\r\n                    // \"scale\": 0.7,\r\n                    \"strokeWidth\": 5,\r\n                    interactive: true, // Интерактив байдал нэмэх\r\n                    cursorOverStyle: \"pointer\" // Hover үед курсорыг \"pointer\" болгох\r\n                }, circleTemplate)\r\n            );\r\n\r\n            circle.animate({\r\n                key: \"strokeOpacity\",\r\n                to: 1,\r\n                duration: 1500, // Animation duration in milliseconds (1s)\r\n                loops: Infinity, // Infinite loop\r\n                easing: am5.ease.yoyo(am5.ease.linear) // Smooth effect\r\n            });\r\n\r\n            let countryLabel = container.children.push(\r\n                am5.Label.new(root, {\r\n                    text: \"{title}\",\r\n                    paddingLeft: 5,\r\n                    populateText: true,\r\n                    fontWeight: \"bold\",\r\n                    fontSize: 12,\r\n                    centerY: am5.p50,\r\n                    x: circle.get(\"radius\"),\r\n                    layer: 5,\r\n                    fill: am5.color(0xffffff)\r\n                })\r\n            );\r\n\r\n            circle.on(\"radius\", function (radius) {\r\n                countryLabel.set(\"x\", radius);\r\n            })\r\n\r\n            circle.events.on(\"pointerover\", function (event) {\r\n                event.target.set(\"scale\", 1.2); // Hover үед хэмжээг томруулах\r\n            })\r\n            circle.events.on(\"pointerout\", function (event) {\r\n                event.target.set(\"scale\", 1); // Хэвийн хэмжээнд буцаах\r\n            })\r\n\r\n            circle.events.on(\"click\", function (event) {\r\n                planeDataItem.set(\"positionOnLine\", 0);\r\n                // planeDataItem.clear();\r\n                resetPlaneAnimation()\r\n                var dataItem = event.target.dataItem;\r\n                var data = dataItem.dataContext;\r\n                setChoosedCountry(data);\r\n                setShowNavigate(true)\r\n                point2.setAll({\r\n                    longitude: data.geometry.coordinates[0],\r\n                    latitude: data.geometry.coordinates[1]\r\n                })\r\n            });\r\n\r\n            return am5.Bullet.new(root, {\r\n                sprite: container\r\n            });\r\n        });\r\n\r\n        citySeries.data.setAll(cities);\r\n\r\n        // Prepare line series data\r\n        let mongoliaDataItem = citySeries.getDataItemById(\"ulaanbaatar\");\r\n\r\n        // this will do all the animations\r\n        am5.array.each(cities, function (did) {\r\n            let destinationDataItem = citySeries.getDataItemById(did.id);\r\n            let lineDataItem = lineSeries.pushDataItem({});\r\n            lineDataItem.set(\"pointsToConnect\", [mongoliaDataItem, destinationDataItem])\r\n        });\r\n\r\n        let planeDataItem = planeSeries.pushDataItem({\r\n            lineDataItem,\r\n            positionOnLine: 0,\r\n            autoRotate: true\r\n        });\r\n\r\n        planeDataItem.dataContext = {};\r\n        resetPlaneAnimation()\r\n\r\n        function resetPlaneAnimation() {\r\n            // Re-animate the plane along the line\r\n            planeDataItem.animate({\r\n                key: \"positionOnLine\",\r\n                to: 1,\r\n                duration: 30000, // Adjust duration as needed\r\n                loops: Infinity, // Make sure it loops if desired\r\n                easing: am5.ease.yoyo(am5.ease.linear) // Smooth yoyo animation\r\n            });\r\n\r\n            // Update the rotation based on position\r\n            planeDataItem.on(\"positionOnLine\", (value) => {\r\n                if (planeDataItem.dataContext.prevPosition < value) {\r\n                    plane.set(\"rotation\", 0);\r\n                }\r\n\r\n                if (planeDataItem.dataContext.prevPosition > value) {\r\n                    plane.set(\"rotation\", -180);\r\n                }\r\n                planeDataItem.dataContext.prevPosition = value;\r\n            });\r\n        }\r\n\r\n        function addCity(coords, title) {\r\n            return pointSeries.pushDataItem({\r\n                latitude: coords.latitude,\r\n                longitude: coords.longitude\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            root.dispose();\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n        <div className='mb-[4rem] h-[100vh]'>\r\n            <div className='w-[100%] h-[100vh] fixed top-0 left-0'>\r\n\r\n                <div className={classNames(\r\n                    choosedCountry.title ? 'opacity-100' : 'opacity-0',\r\n                    'transition-opacity ease-in-out delay-150 duration-300'\r\n                )}>\r\n                    <div\r\n                        className={\r\n                            classNames(\r\n                                'transition absolute bg-black/30 w-80 h-full text-white pt-20',\r\n                                'backdrop-blur-md px-4 py-8 space-y-4 shadow-md z-10 duration-500',\r\n                                shownavigate ? 'translate-x-0' : '-translate-x-full'\r\n                            )}\r\n                        style={{\r\n                            boxShadow: \"0 1px 2px rgba(60,64,67,0.3),0 2px 6px 2px rgba(60,64,67,0.15)\"\r\n                        }}\r\n                    >\r\n                        {/* <div className='text-center'>\r\n                            {t('ulaanbaatar')} - {t(choosedCountry.id)}\r\n                        </div> */}\r\n                        <div className=\"flex flex-col justify-between h-full\">\r\n                            <div>\r\n                                <div>\r\n                                    <img src=\"/image/main/plane-500.jpg\" alt=\"\"\r\n                                        className=\"rounded-md\"\r\n                                    />\r\n                                </div>\r\n                                <div className='text-justify text-sm mt-4'>\r\n                                    {t(choosedCountry.id + 'desc')}\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <div className='absolute right-[20%] pt-3 font-bold'>\r\n                                    {t(choosedCountry.id)}\r\n                                </div>\r\n                                <div className='absolute bottom-[12rem] left-[10px]'>\r\n                                    <div className='flex items-center bg-black/30 p-2 rounded backdrop-blur-md'>\r\n                                        <div className='text-xs'>Distance: &nbsp;</div>\r\n                                        <div className='text-sm'>{choosedCountry.distance}</div>\r\n                                    </div>\r\n                                    <span class=\"relative flex h-3 w-3 mx-auto -z-[1]\">\r\n                                        <span class=\"absolute inline-flex h-full w-full animate-ping rounded-full bg-sky-400 opacity-75\"></span>\r\n                                        <span class=\"relative h-3 w-3 rounded-full bg-sky-500\"></span>\r\n                                    </span>\r\n                                </div>\r\n                                <img src=\"/logos/some/flight2.png\" alt=\"\" className='h-64' />\r\n                                <div className='absolute bottom-[3rem] left-[20%] font-bold'>\r\n                                    {t('ulaanbaatar')}\r\n                                </div>\r\n                                <div className='absolute bottom-[6rem] right-[5px] bg-black/30 p-2 rounded backdrop-blur-md'>\r\n                                    <div className='text-xs'>Total travel time: </div>\r\n                                    <div className='text-sm'>{choosedCountry.duration}</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className={\r\n                        classNames(\r\n                            'transition absolute left-80 top-[calc(50%-24px)] block z-10 duration-500',\r\n                            shownavigate ? 'translate-x-0' : '-translate-x-80'\r\n                        )\r\n                    }>\r\n                        <button\r\n                            className={classNames(\r\n                                'h-[48px] w-[23px] bg-black/30 backdrop-blur-md cursor-pointer hover:bg-primary-700',\r\n                                'rounded-r-full border-l border-l-primary-600'\r\n                            )}\r\n                            style={{\r\n                                boxShadow: '0 1px 2px rgba(60, 64, 67, 0.3), 0 2px 6px 2px rgba(60, 64, 67, 0.15)'\r\n                            }}\r\n                            onClick={clickShowNavigate}\r\n                        >\r\n                            {shownavigate ? <ChevronLeftIcon className='h-4 w-4 text-white' /> : <ChevronRightIcon className='h-4 w-4 text-white' />}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div id=\"chartdiv\" className=\"h-[100vh]\"></div>\r\n                <div class=\"bg\"></div>\r\n                <div class=\"star-field\">\r\n                    <div class=\"layer\"></div>\r\n                    <div class=\"layer\"></div>\r\n                    <div class=\"layer\"></div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Destinations"],"names":["classNames","_len","arguments","length","classes","Array","_key","filter","Boolean","join","Destinations","choosedCountry","setChoosedCountry","useState","shownavigate","setShowNavigate","t","useTranslation","useEffect","window","scrollTo","top","behavior","useLayoutEffect","root","am5","new","setThemes","am5themes_Animated","chart","container","children","push","am5map","panX","panY","projection","wheelY","set","homeButton","chartContainer","get","events","on","goHome","series","geoJSON","am5geodataWorldLow","exclude","mapPolygons","template","ev","data","target","dataItem","dataContext","console","log","backgroundSeries","unshift","setAll","fill","strokeOpacity","geometry","animate","key","to","duration","easing","lineSeries","mapLines","stroke","strokeWidth","bullets","circle","radius","sprite","cities","id","title","country","type","coordinates","distance","citySeries","planeSeries","pointSeries","point1","addCity","latitude","longitude","point2","lineDataItem","pushDataItem","pointsToConnect","plane","svgPath","scale","centerY","centerX","circleTemplate","tooltipText","tooltipY","interactive","cursorOverStyle","loops","Infinity","countryLabel","text","paddingLeft","populateText","fontWeight","fontSize","x","layer","event","planeDataItem","resetPlaneAnimation","mongoliaDataItem","getDataItemById","did","destinationDataItem","positionOnLine","autoRotate","value","prevPosition","coords","dispose","_jsx","className","_jsxs","style","boxShadow","src","alt","class","onClick","clickShowNavigate","ChevronLeftIcon","ChevronRightIcon"],"sourceRoot":""}