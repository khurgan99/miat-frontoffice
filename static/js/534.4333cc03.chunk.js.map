{"version":3,"file":"static/js/534.4333cc03.chunk.js","mappings":"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","sources":["pages/Destinations.js"],"sourcesContent":["import { useLayoutEffect } from 'react';\r\nimport * as am5 from \"@amcharts/amcharts5\";\r\nimport * as am5map from \"@amcharts/amcharts5/map\";\r\nimport am5geodataWorldLow from \"@amcharts/amcharts5-geodata/worldLow\";\r\nimport am5themes_Animated from \"@amcharts/amcharts5/themes/Animated\";\r\n\r\nconst Destinations = () => {\r\n    useLayoutEffect(() => {\r\n        let root = am5.Root.new(\"chartdiv\");\r\n\r\n        // Set themes\r\n        root.setThemes([\r\n            am5themes_Animated.new(root)\r\n        ]);\r\n\r\n        var chart = root.container.children.push(\r\n            am5map.MapChart.new(root, {\r\n                panX: \"rotateX\",\r\n                projection: am5map.geoMercator(),\r\n                homeGeoPoint: { latitude: 2, longitude: 2 }\r\n            })\r\n        );\r\n\r\n        // Create polygon series\r\n        var polygonSeries = chart.series.push(\r\n            am5map.MapPolygonSeries.new(root, {\r\n                geoJSON: am5geodataWorldLow,\r\n                exclude: [\"AQ\"]\r\n            })\r\n        );\r\n\r\n        polygonSeries.mapPolygons.template.setAll({\r\n            tooltipText: \"{name}\",\r\n            interactive: true\r\n        });\r\n\r\n        polygonSeries.mapPolygons.template.states.create(\"hover\", {\r\n            fill: am5.color('#9fbfde')\r\n        });\r\n\r\n        polygonSeries.mapPolygons.template.events.on(\"click\", (ev) => {\r\n            var dataItem = ev.target.dataItem;\r\n            var data = dataItem.dataContext;\r\n            console.log(data);\r\n        });\r\n\r\n        // this will be invisible line (note strokeOpacity = 0) along which invisible points will animate\r\n        let lineSeries = chart.series.push(am5map.MapLineSeries.new(root, {}));\r\n        lineSeries.mapLines.template.setAll({\r\n            stroke: root.interfaceColors.get(\"alternativeBackground\"),\r\n            strokeOpacity: 0.3\r\n        });\r\n\r\n        // this will be visible line. Lines will connectg animating points so they will look like animated\r\n        let animatedLineSeries = chart.series.push(am5map.MapLineSeries.new(root, {}));\r\n        animatedLineSeries.mapLines.template.setAll({\r\n            stroke: root.interfaceColors.get(\"alternativeBackground\"),\r\n            strokeOpacity: 0.6\r\n        });\r\n\r\n        // invisible series which will animate along invisible lines\r\n        let animatedBulletSeries = chart.series.push(\r\n            am5map.MapPointSeries.new(root, {})\r\n        );\r\n\r\n        animatedBulletSeries.bullets.push(function () {\r\n            let circle = am5.Circle.new(root, {\r\n                radius: 0\r\n            });\r\n\r\n            return am5.Bullet.new(root, {\r\n                sprite: circle\r\n            });\r\n        });\r\n\r\n\r\n        let cities = [\r\n            {\r\n                id: \"mongolia\",\r\n                title: \"Ulaanbaatar\",\r\n                geometry: { type: \"Point\", coordinates: [103.8467, 46.8625] },\r\n            },\r\n            {\r\n                id: \"frankfurt\",\r\n                title: \"Frankfurt\",\r\n                geometry: { type: \"Point\", coordinates: [8.6821, 50.1109] }\r\n            },\r\n            {\r\n                id: \"hongkong\",\r\n                title: \"Hong Kong\",\r\n                geometry: { type: \"Point\", coordinates: [114.2, 22.3] }\r\n            },\r\n        ];\r\n\r\n        // destination series\r\n        let citySeries = chart.series.push(\r\n            am5map.MapPointSeries.new(root, {})\r\n        );\r\n\r\n        let planeSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\r\n        let pointSeries = chart.series.push(am5map.MapPointSeries.new(root, {}));\r\n\r\n        let point1 = addCity({ latitude: 46.8625, longitude: 103.8467 }, \"Ulaanbaatar\");\r\n        let point2 = addCity({ latitude: 50.1109, longitude: 8.6821 }, \"Frankfurt\");\r\n\r\n        let lineDataItem = lineSeries.pushDataItem({\r\n            pointsToConnect: [point1, point2]\r\n        });\r\n\r\n\r\n        let plane = am5.Graphics.new(root, {\r\n            svgPath:\r\n                \"m2,106h28l24,30h72l-44,-133h35l80,132h98c21,0 21,34 0,34l-98,0 -80,134h-35l43,-133h-71l-24,30h-28l15,-47\",\r\n            scale: 0.06,\r\n            centerY: am5.p50,\r\n            centerX: am5.p50,\r\n            fill: am5.color('#012853')\r\n        });\r\n\r\n        planeSeries.bullets.push(function () {\r\n            let container = am5.Container.new(root, {});\r\n            container.children.push(plane);\r\n            return am5.Bullet.new(root, { sprite: container });\r\n        });\r\n\r\n        // visible city circles\r\n        citySeries.bullets.push(function () {\r\n            let circle = am5.Circle.new(root, {\r\n                radius: 5,\r\n                tooltipText: \"{title}\",\r\n                tooltipY: 0,\r\n                fill: am5.color(0xffba00),\r\n                stroke: root.interfaceColors.get(\"background\"),\r\n                strokeWidth: 2\r\n            });\r\n\r\n            circle.events.on(\"click\", function (event) {\r\n                planeDataItem.set(\"positionOnLine\", 0);\r\n                // planeDataItem.clear();\r\n                resetPlaneAnimation()\r\n                var dataItem = event.target.dataItem;\r\n                var data = dataItem.dataContext;\r\n                point2.setAll({\r\n                    longitude: data.geometry.coordinates[0],\r\n                    latitude: data.geometry.coordinates[1]\r\n                })\r\n            });\r\n\r\n            return am5.Bullet.new(root, {\r\n                sprite: circle\r\n            });\r\n        });\r\n\r\n        citySeries.data.setAll(cities);\r\n\r\n        // Prepare line series data\r\n        let destinations = [\"frankfurt\", \"hongkong\"]\r\n        let mongoliaDataItem = citySeries.getDataItemById(\"mongolia\");\r\n\r\n        // this will do all the animations\r\n        am5.array.each(destinations, function (did) {\r\n            let destinationDataItem = citySeries.getDataItemById(did);\r\n            let lineDataItem = lineSeries.pushDataItem({});\r\n            lineDataItem.set(\"pointsToConnect\", [mongoliaDataItem, destinationDataItem])\r\n        });\r\n\r\n        let planeDataItem = planeSeries.pushDataItem({\r\n            lineDataItem,\r\n            positionOnLine: 0,\r\n            autoRotate: true\r\n        });\r\n\r\n        planeDataItem.dataContext = {};\r\n        resetPlaneAnimation()\r\n        // planeDataItem.animate({\r\n        //     key: \"positionOnLine\",\r\n        //     to: 1,\r\n        //     duration: 30000,\r\n        //     loops: Infinity,\r\n        //     easing: am5.ease.yoyo(am5.ease.linear)\r\n        // });\r\n\r\n        // planeDataItem.on(\"positionOnLine\", (value) => {\r\n        //     // console.log(data.id, 'value', value)\r\n        //     if (planeDataItem.dataContext.prevPosition < value) {\r\n        //         plane.set(\"rotation\", 0);\r\n        //     }\r\n\r\n        //     if (planeDataItem.dataContext.prevPosition > value) {\r\n        //         plane.set(\"rotation\", -180);\r\n        //     }\r\n        //     planeDataItem.dataContext.prevPosition = value;\r\n        // });\r\n\r\n        function resetPlaneAnimation() {\r\n            // Re-animate the plane along the line\r\n            planeDataItem.animate({\r\n                key: \"positionOnLine\",\r\n                to: 1,\r\n                duration: 30000, // Adjust duration as needed\r\n                loops: Infinity, // Make sure it loops if desired\r\n                easing: am5.ease.yoyo(am5.ease.linear) // Smooth yoyo animation\r\n            });\r\n\r\n            // Update the rotation based on position\r\n            planeDataItem.on(\"positionOnLine\", (value) => {\r\n                if (planeDataItem.dataContext.prevPosition < value) {\r\n                    plane.set(\"rotation\", 0);\r\n                }\r\n\r\n                if (planeDataItem.dataContext.prevPosition > value) {\r\n                    plane.set(\"rotation\", -180);\r\n                }\r\n                planeDataItem.dataContext.prevPosition = value;\r\n            });\r\n        }\r\n\r\n        function addCity(coords, title) {\r\n            return pointSeries.pushDataItem({\r\n                latitude: coords.latitude,\r\n                longitude: coords.longitude\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            root.dispose();\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"chartdiv\" className=\"h-full min-h-screen\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Destinations"],"names":["Destinations","useLayoutEffect","root","am5","new","setThemes","am5themes_Animated","chart","container","children","push","am5map","panX","projection","homeGeoPoint","latitude","longitude","polygonSeries","series","geoJSON","am5geodataWorldLow","exclude","mapPolygons","template","setAll","tooltipText","interactive","states","create","fill","events","on","ev","data","target","dataItem","dataContext","console","log","lineSeries","mapLines","stroke","interfaceColors","get","strokeOpacity","bullets","circle","radius","sprite","citySeries","planeSeries","pointSeries","point1","addCity","point2","lineDataItem","pushDataItem","pointsToConnect","plane","svgPath","scale","centerY","centerX","tooltipY","strokeWidth","event","planeDataItem","set","resetPlaneAnimation","geometry","coordinates","id","title","type","mongoliaDataItem","getDataItemById","did","destinationDataItem","positionOnLine","autoRotate","animate","key","to","duration","loops","Infinity","easing","value","prevPosition","coords","dispose","_jsx","className"],"sourceRoot":""}